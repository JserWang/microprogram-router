import{o as n,c as s,a}from"./app.9a765ee9.js";const p='{"title":"落地中转页","description":"","frontmatter":{},"relativePath":"guide/practice/page-transfer.md","lastUpdated":1620045750281}',t={},o=a('<h1 id="落地中转页"><a class="header-anchor" href="#落地中转页" aria-hidden="true">#</a> 落地中转页</h1><p>在实际应用中，我们经常会遇到将某页生成二维码或者在公众号点击链接跳转至某页等方法，但这类页面由于没有通过 router 跳转，所以参数会丢失。</p><p>所以，在遇到这种情况时，我们通常会封装一个中转页（PageTransfer）：</p><p>其中<code>index.js</code>代码如下：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@microprogram/router&#39;</span>\n\n<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> scene<span class="token punctuation">,</span> <span class="token operator">...</span>args <span class="token punctuation">}</span> <span class="token operator">=</span> options\n\n    <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> scene <span class="token keyword">as</span> string<span class="token punctuation">,</span>\n      params<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>args\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      replace<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>在 router 的 routes 中添加：</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;transfer&#39;</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/transfer&#39;</span><span class="token punctuation">,</span>\n    page<span class="token operator">:</span> <span class="token string">&#39;pages/transfer/index&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>通过以上两部分代码，我们就实现了一个简单的落地中转页，我们只需要对外暴露链接<code>pages/transfer/index?scene=xxx</code> 即可，当页面需要其他任意参数时，只需要在 <code>scene</code> 无限拼接即可。</p><p>上述代码是一个最基本的落地中转页实践，当然中转页能做的事情还不止这些，你还可以加入小程序短链功能，所谓的短链就是将<code>?scene=xxx&amp;...</code>中的所有内容通过短链服务生成一个唯一的 uuid 并将 uuid 于参数持久化，在调用 <code>router.push</code> 之前，调用短链服务使用uuid换回真实参数再进行跳转即可。</p>',9);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
