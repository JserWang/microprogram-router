import{o as n,c as s,a}from"./app.9a765ee9.js";const t='{"title":"路由跳转方式","description":"","frontmatter":{"sidebarDepth":0},"headers":[{"level":2,"title":"导航到不同的位置","slug":"导航到不同的位置"},{"level":2,"title":"替换当前位置","slug":"替换当前位置"},{"level":2,"title":"横跨历史","slug":"横跨历史"}],"relativePath":"guide/basics/navigation.md","lastUpdated":1620047287781}',p={},o=a('<h1 id="路由跳转方式"><a class="header-anchor" href="#路由跳转方式" aria-hidden="true">#</a> 路由跳转方式</h1><p>在 router 中没有直接提供类似 <code>vue-router</code> 中的 <code>&lt;router-link /&gt;</code> 的组件式使用方式，如果想使用可见 <a href="./../practice/router-link.html">RouterLink</a>。</p><p>在 js 文件中可通过 <code>useRouter()</code> 获取到当前路由实例。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@microprogram/router&#39;</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="导航到不同的位置"><a class="header-anchor" href="#导航到不同的位置" aria-hidden="true">#</a> 导航到不同的位置</h2><p>想要导航到不同的 URL，可以使用 <code>router.push</code> 方法。</p><p>当调用 push 时的执行策略：</p><ol><li>当跳转页面不是同一页时，若目标页面存在于页面栈时，会执行 <code>back</code> 操作</li><li>当前路由栈超过要求上限时（如：微信小程序路由栈上限为10），会执行 <code>replace</code> 操作</li><li>否则会执行常规 <code>push</code> 操作，向小程序路由栈添加一条新的记录</li></ol><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><div class="language-ts"><pre><code><span class="token comment">// 字符串路径</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/users/JserWang&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 带有路径的对象</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/users/JserWang&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 命名的路由，并加上参数，让路由建立 url</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;JserWang&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>与 <code>vue-router</code> 的参数不同点在于，小程序的路由永远只有 <code>params</code>，所以传参的方式只包含三种</p></div><div class="language-ts"><pre><code><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;JserWang&#39;</span>\n<span class="token comment">// 通过 ? 直接传参</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user?username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token comment">// 通过 params 传参</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 通过 动态路由传参 传参</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="替换当前位置"><a class="header-anchor" href="#替换当前位置" aria-hidden="true">#</a> 替换当前位置</h2><p>它的作用类似于 <code>router.push</code>，不同的是，正如它的名字所暗示的那样——它取代了当前的条目。</p><div class="language-ts"><pre><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 相当于</span>\nrouter<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="横跨历史"><a class="header-anchor" href="#横跨历史" aria-hidden="true">#</a> 横跨历史</h2><p>该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步，类似于 <code>window.history.go(n)</code>。</p><p>例子</p><div class="language-js"><pre><code>\n<span class="token comment">// 返回一条记录，与router.back() 相同</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 返回 3 条记录</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 如果没有那么多记录，会回到路由栈中第一个页面</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n</code></pre></div>',19);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
